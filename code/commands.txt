

———————————————————————————————————————MAJ—————————————————————————————————————————————
sudo apt-get update && sudo apt-get upgrade

———————————————————————————————————————CMD BASE——————————————————————————————————————————
# - Processus RPi
top
ps aux

#Temperature Raspberry Pi 
vcgencmd measure_temp

#Kill processus
sudo pkill -f dimLED.py

#Initialize profile
source ~/.profile

Afficher la température : 
/opt/vc/bin/vcgencmd measure_temp

#Update the RPi date
1. sudo raspi-config
2. Internationalization options
3. Change Time Zone
4. Select geographical area
5. Select city or region.
6. Reboot your pi.

#Give the right
chmod +x

#Deleting in sudo Mode
sudo rm -rf html/

————————————————————————————————————.BASHRC———————————————————————————————————————
nano .bashrc
# MAJ Pyhton3.
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3

#RFID
#1 - Permet de cree un lien entre ttyACM0 et ttyS1
sudo ln -s /dev/ttyACM0 /dev/ttyS1
#2 - Modification de chemin :
export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

———————————————————————————————————————RFID——————————————————————————————————————————
1 - Permet de cree un lien entre ttyACM0 et ttyS1
sudo ln -s /dev/ttyACM0 /dev/ttyS1

2a - Modification de chemin(Odalid) : 
export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

2b - Modification de chemin (universal): 
LD_LIBRARY_PATH=/usr/local/lib
export LD_LIBRARY_PATH
echo $LD_LIBRARY_PATH

3 - lsusb : Liste tous les périphériques USB connectés à votre Raspberry Pi.

4 - make clean

5 - make

6 - ./Access_Control 

# Récupérer les derniers messages système. 
dmesg -s 1024
dmesg -s 1024 | grep ODALID
dmesg | tail

# Executer depuis n’importe quel emplacement
export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH; cd /home/pi/rfid_reader/Access_Control; ./Access_Control

# Executer depuis n’importe quel emplacement + injection dans fichier .txt
export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH; cd /home/pi/rfid_reader/Access_Control; ./Access_Control > /home/pi/rfid_reader/Access_Control/access_control.txt

# Récupération de bonne informations, ici on récupère le contenu de la ligne après ‘nom’:
cat access_control.txt | grep 'nom:' | awk '{print $2}'

# [Full path] Récupération de bonne informations
#’nom:’
cat /home/pi/rfid_reader/Access_Control/access_control.txt | grep '^nom:' | awk '{print $2}'
#’prenom:’
cat /home/pi/rfid_reader/Access_Control/access_control.txt | grep 'prenom:' | awk '{print $2}'
#’rfid_reader:’
cat /home/pi/rfid_reader/Access_Control/access_control.txt | grep 'rfid_reader:' | awk '{print $2}'
#’version:’
cat /home/pi/rfid_reader/Access_Control/access_control.txt | grep 'version:' | awk '{print $2 $3 $4}'
#’PollCard:’
cat /home/pi/rfid_reader/Access_Control/access_control.txt | grep 'PollCard:' | awk '{print $2}'
#’increment:’
cat /home/pi/rfid_reader/Access_Control/access_control.txt | grep 'increment:' | awk '{print $2}'

———————————————————————————————————————OPENCV——————————————————————————————————————————

3a - cmake pour openCV 3.1.0 : 
cmake -D CMAKE_BUILD_TYPE=RELEASE     -D CMAKE_INSTALL_PREFIX=/usr/local     -D INSTALL_PYTHON_EXAMPLES=ON     -D OPENCV_EXTRA_MODULES_PATH=~/opencv/opencv_contrib-3.1.0/modules     -D BUILD_EXAMPLES=ON -D ENABLE_PRECOMPILED_HEADERS=OFF ..

3a - Final pour openCV 3.1.0 :
cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D INSTALL_C_EXAMPLES=OFF -D INSTALL_PYTHON_EXAMPLES=ON -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.1.0/modules -D BUILD_EXAMPLES=ON -D ENABLE_PRECOMPILED_HEADERS=OFF ..

3b - cmake pour openCV 3.3.0 (updated) :
cmake -D CMAKE_BUILD_TYPE=RELEASE \
      -D CMAKE_INSTALL_PREFIX=/usr/local \
      -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.3.0/modules \
      -D ENABLE_NEON=ON \
      -D ENABLE_VFPV3=ON \
      -D BUILD_TESTS=OFF \
      -D INSTALL_PYTHON_EXAMPLES=OFF \
      -D ENABLE_PRECOMPILED_HEADERS=OFF \
      -D BUILD_EXAMPLES=OFF ..

3b - Final1 pour openCV 3.3.0 : 
cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.3.0/modules -D ENABLE_NEON=ON -D ENABLE_VFPV3=ON -D BUILD_TESTS=OFF -D INSTALL_PYTHON_EXAMPLES=OFF -D ENABLE_PRECOMPILED_HEADERS=OFF -D BUILD_EXAMPLES=OFF ..

3b - Final2 pour openCV 3.3.0 (without headers - RECOMMENDED):
cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.3.0/modules -D ENABLE_NEON=ON -D ENABLE_VFPV3=ON -D BUILD_TESTS=OFF -D INSTALL_PYTHON_EXAMPLES=OFF -D BUILD_EXAMPLES=OFF ..

4 - Fichier ~/.profile
# virtualenv and virtualenvwrapper
export WORKON_HOME=$HOME/pi/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh

5 - Step #6: Finish installing OpenCV on your Pi
ls -l /usr/local/lib/python3.5/site-packages/
cd /usr/local/lib/python3.5/site-packages/
sudo mv cv2.cpython-35m-arm-linux-gnueabihf.so cv2.so
cd ~/.virtualenvs/cv/lib/python3.5/site-packages/
ln -s /usr/local/lib/python3.5/site-packages/cv2.so cv2.so

Now everything works with the command : python3 (python not working)

6a - Step #4: Create your Python virtual environment and install NumPy

export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3

6b - Pour le lancer au démarrage : 

nano .bashrc 
# MAJ Pyhton3.
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3

——————————————————————————————Smart-Security-Camera———————————————————————————————————
#0 : Creer script
touch camera_secured.sh
nano camera_secured.sh 
#1-Script
#!/bin/bash
echo "source ~/.profile; workon cv; cd /home/pi/Smart-Security-Camera/; python main.py"
#2-Give the right
chmod +x camera_secured.sh 
#3-Command
cd /home/pi/Smart-Security-Camera/; ./camera_secured.sh | bash
#4-Kill script
sudo pkill -f main.py

———————————————-——————Smart-Security-Camera-NoSecurity———————————————————————————————

#0 : Creer script
touch camera_auto.sh
nano camera_auto.sh 
#1-Script
#!/bin/bash
echo "source ~/.profile; workon cv; cd /home/pi/Smart-Security-Camera-NoSecurity/; python main.py"
#2-Give the right
chmod +x camera_auto.sh 
#3-Command
cd /home/pi/Smart-Security-Camera-NoSecurity/; ./camera_auto.sh | bash
#4-Kill script
sudo pkill -f main.py

———————————————————————————————————————WEB——————————————————————————————————————————

#INSTALLATION APACHE
sudo apt-get install apache2 -y

#INSTALLATION PHP
sudo apt-get install php7.0 libapache2-mod-php7.0

#INSTALLATION WiringPi
sudo apt-get install git-core
git clone git://git.drogon.net/wiringPi
cd wiringPi/
sudo git pull origin
./build

#Vérifier les GPIO puis supprimer le fichier git
gpio -v
sudo rm -rf wiringPi/

#Supprimer dossier /var/www/html
sudo rm -r /var/www/html

#Copier dossier dans /var/www
sudo cp -R html /var/www


————————————————————————————————————NODE RED———————————————————————————————————————

bash <(curl -sL https://raw.githubusercontent.com/node-red/raspbian-deb-package/master/resources/update-nodejs-and-nodered)

update-nodejs-and-nodered

cd ~/.node-red
npm rebuild

#To see the list of nodes you had installed:
cd ~/.node-red
npm ls --depth=0


sudo apt-get install npm
sudo npm install -g npm@3.x

#START
node-red-start
#STOP	
node-red-stop

#Sécuriser la base avec mot de passe haché
cd .node-red
nano settings.js 
sudo npm install -g node-red-admin
node-red-admin hash-pw
—> Résultat du mdp ‘esirem’ haché : $2a$08$Ez3yu3ViXRKZXjzoWlK5VuC.AJwstVOTEfRqvLFoB1qPTTmxLqv92

#Nodes to install
node-red-contrib-os
node-red-dashboard
node-red-contrib-play-audio-file

————————————————————————————————————DEEP LEARNING———————————————————————————————————————

# Capture a photo 
raspistill -o /home/pi/pi-deep-learning/images/image.jpg --vflip

# GoogLeNet
python pi_deep_learning.py --prototxt models/bvlc_googlenet.prototxt --model models/bvlc_googlenet.caffemodel --labels synset_words.txt --image images/image.jpg

# # Squeezenet
python pi_deep_learning.py --prototxt models/squeezenet_v1.0.prototxt --model models/squeezenet_v1.0.caffemodel --labels synset_words.txt --image images/image.jpg


# GoogLeNet VS Squeezenet
SqueezeNet is significantly faster, it’s less accurate than GoogLeNet. So GoogLeNet is better and our final choice.

# Concatenation pour deep learning depuis la source
source ~/.profile | workon cv | python /home/pi/pi-deep-learning/pi_deep_learning.py --prototxt /home/pi/pi-deep-learning/models/bvlc_googlenet.prototxt --model /home/pi/pi-deep-learning/models/bvlc_googlenet.caffemodel --labels /home/pi/pi-deep-learning/synset_words.txt --image /home/pi/pi-deep-learning/images/image.jpg

# Concatenation pour envoyer la sortie dans un fichier texte
python /home/pi/pi-deep-learning/pi_deep_learning.py --prototxt /home/pi/pi-deep-learning/models/bvlc_googlenet.prototxt --model /home/pi/pi-deep-learning/models/bvlc_googlenet.caffemodel --labels /home/pi/pi-deep-learning/synset_words.txt --image /home/pi/pi-deep-learning/images/image.jpg > deep_learning_analysis.txt 

#Final
#1-Script
#!/bin/bash
echo "source ~/.profile; workon cv; cd /home/pi/pi-deep-learning; python /home/pi/pi-deep-learning/pi_deep_learning.py --prototxt /home/pi/pi-deep-learning/models/bvlc_googlenet.prototxt --model /home/pi/pi-deep-learning/models/bvlc_googlenet.caffemodel --labels /home/pi/pi-deep-learning/synset_words.txt --image /home/pi/pi-deep-learning/images/image.jpg > /home/pi/pi-deep-learning/deep_learning_analysis.txt"
#2-Give the right
chmod +x deep_learning_script.sh 
#2-Command
cd /home/pi/pi-deep-learning/; ./deep_learning_script.sh | bash

————————————————————————————————————SOUND———————————————————————————————————————

#Enabling the Sound Module
sudo modprobe snd-bcm2835

#Enabling Audio Output
amixer cset numid=3 1

#Install mpg321
sudo apt-get install mpg321

#Sound Check
aplay numnuts.wav
speaker-test -t sine -f 440 -c 2 -s 1
mpg321 "Mannish Boy.mp3"

#MP3 and WAV Conversion
- To convert from WAV to MP3: 
lame input.wav output.mp3
- To convert from MP3 to WAV:  
mpg321 -w output.wav input.mp3

#Set Volume
amixer set PCM -- 100%

#kill ALL Sound
sudo pkill -f aplay

#Play a song from everywhere with condition
cd /home/pi/music; ./play_entry.sh | bash

#Play a song without condition
aplay /home/pi/music/weeknd.wav 


